// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addArticleToBookmarkList = `-- name: AddArticleToBookmarkList :one
INSERT INTO list_post (list_id, post_id) VALUES ($1, $2) RETURNING list_id, post_id
`

type AddArticleToBookmarkListParams struct {
	ListID int32 `json:"list_id"`
	PostID int64 `json:"post_id"`
}

func (q *Queries) AddArticleToBookmarkList(ctx context.Context, arg AddArticleToBookmarkListParams) (ListPost, error) {
	row := q.db.QueryRow(ctx, addArticleToBookmarkList, arg.ListID, arg.PostID)
	var i ListPost
	err := row.Scan(&i.ListID, &i.PostID)
	return i, err
}

const createBookmarkList = `-- name: CreateBookmarkList :one
INSERT INTO reading_list (list_name, owner, is_saved) VALUES ($1, $2, $3) RETURNING id, list_name, owner, is_saved
`

type CreateBookmarkListParams struct {
	ListName string      `json:"list_name"`
	Owner    pgtype.Int4 `json:"owner"`
	IsSaved  bool        `json:"is_saved"`
}

func (q *Queries) CreateBookmarkList(ctx context.Context, arg CreateBookmarkListParams) (ReadingList, error) {
	row := q.db.QueryRow(ctx, createBookmarkList, arg.ListName, arg.Owner, arg.IsSaved)
	var i ReadingList
	err := row.Scan(
		&i.ID,
		&i.ListName,
		&i.Owner,
		&i.IsSaved,
	)
	return i, err
}

const deleteBookmarkList = `-- name: DeleteBookmarkList :one
DELETE FROM reading_list WHERE id = $1 RETURNING id, list_name, owner, is_saved
`

func (q *Queries) DeleteBookmarkList(ctx context.Context, id int32) (ReadingList, error) {
	row := q.db.QueryRow(ctx, deleteBookmarkList, id)
	var i ReadingList
	err := row.Scan(
		&i.ID,
		&i.ListName,
		&i.Owner,
		&i.IsSaved,
	)
	return i, err
}

const getArticleById = `-- name: GetArticleById :one


SELECT id, title, publish_date, url, source_id FROM post WHERE id = $1
`

// -- DROP SCHEMA public CASCADE;
// -- CREATE SCHEMA public;
// -- GRANT ALL ON SCHEMA public TO postgres;
// -- GRANT ALL ON SCHEMA public TO public;
//
// CREATE TABLE "user" (
//
//	id SERIAL PRIMARY KEY,
//	username VARCHAR(255) UNIQUE NOT NULL,
//	"password" VARCHAR(255) NOT NULL
//
// );
//
// CREATE TABLE source (
//
//	id SERIAL PRIMARY KEY,
//	"name" VARCHAR(255) NOT NULL,
//	"url" VARCHAR(255) NOT NULL,
//	avatar VARCHAR(255) NOT NULL -- consider how to store the image
//
// );
//
// CREATE TABLE post (
//
//	                  id BIGSERIAL PRIMARY KEY,
//	                  title VARCHAR(255) NOT NULL,
//	                  publish_date BIGINT,
//	                  "url" VARCHAR(255) NOT NULL,
//	                  source_id INTEGER REFERENCES source (id) ON DELETE CASCADE -- delete post when source is deleted
//	-- consider about the image of post to show on the top
//
// );
//
// CREATE TABLE subscription (
//
//	user_id INTEGER REFERENCES "user" (id) ON DELETE CASCADE,
//	source_id INTEGER REFERENCES source (id) ON DELETE CASCADE,
//	PRIMARY KEY (user_id, source_id)
//
// );
//
// CREATE TABLE reading_list (
//
//	id SERIAL PRIMARY KEY,
//	list_name VARCHAR(255) NOT NULL,
//	"owner" INTEGER REFERENCES "user" (id) ON DELETE CASCADE,
//	is_saved BOOLEAN NOT NULL -- stands for saved post list, the other list will be create with name
//
// );
//
// CREATE TABLE list_post (
//
//	list_id INTEGER REFERENCES reading_list (id) ON DELETE CASCADE,
//	post_id BIGINT REFERENCES post(id) ON DELETE CASCADE,
//	PRIMARY KEY (list_id, post_id)
//
// );
//
// CREATE TABLE list_sharing (
//
//	list_id INTEGER REFERENCES reading_list (id) ON DELETE CASCADE,
//	user_id INTEGER REFERENCES "user" (id) ON DELETE CASCADE,
//	PRIMARY KEY (list_id, user_id)
//
// );
// -----------------------------------------------
// ARTICLE REPOSITORY
// -----------------------------------------------
func (q *Queries) GetArticleById(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRow(ctx, getArticleById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PublishDate,
		&i.Url,
		&i.SourceID,
	)
	return i, err
}

const getArticlesByPublisherId = `-- name: GetArticlesByPublisherId :many
SELECT id, title, publish_date, url, source_id FROM post WHERE source_id = $1
`

func (q *Queries) GetArticlesByPublisherId(ctx context.Context, sourceID pgtype.Int4) ([]Post, error) {
	rows, err := q.db.Query(ctx, getArticlesByPublisherId, sourceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.PublishDate,
			&i.Url,
			&i.SourceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookmarkListById = `-- name: GetBookmarkListById :many

SELECT id, list_name, owner, is_saved FROM reading_list WHERE id = $1
`

// -----------------------------------------------
// BOOKMARK LIST REPOSITORY
// -----------------------------------------------
func (q *Queries) GetBookmarkListById(ctx context.Context, id int32) ([]ReadingList, error) {
	rows, err := q.db.Query(ctx, getBookmarkListById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReadingList{}
	for rows.Next() {
		var i ReadingList
		if err := rows.Scan(
			&i.ID,
			&i.ListName,
			&i.Owner,
			&i.IsSaved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookmarkListsOwnByUserId = `-- name: GetBookmarkListsOwnByUserId :many
SELECT id, list_name, owner, is_saved FROM reading_list WHERE owner = $1
`

func (q *Queries) GetBookmarkListsOwnByUserId(ctx context.Context, owner pgtype.Int4) ([]ReadingList, error) {
	rows, err := q.db.Query(ctx, getBookmarkListsOwnByUserId, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReadingList{}
	for rows.Next() {
		var i ReadingList
		if err := rows.Scan(
			&i.ID,
			&i.ListName,
			&i.Owner,
			&i.IsSaved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookmarkListsSharedWithUserId = `-- name: GetBookmarkListsSharedWithUserId :many
SELECT DISTINCT id, list_name, owner, is_saved, list_id, user_id
FROM reading_list
JOIN list_sharing ON reading_list.id = list_sharing.list_id
WHERE list_sharing.user_id = $1
`

type GetBookmarkListsSharedWithUserIdRow struct {
	ID       int32       `json:"id"`
	ListName string      `json:"list_name"`
	Owner    pgtype.Int4 `json:"owner"`
	IsSaved  bool        `json:"is_saved"`
	ListID   int32       `json:"list_id"`
	UserID   int32       `json:"user_id"`
}

func (q *Queries) GetBookmarkListsSharedWithUserId(ctx context.Context, userID int32) ([]GetBookmarkListsSharedWithUserIdRow, error) {
	rows, err := q.db.Query(ctx, getBookmarkListsSharedWithUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBookmarkListsSharedWithUserIdRow{}
	for rows.Next() {
		var i GetBookmarkListsSharedWithUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.ListName,
			&i.Owner,
			&i.IsSaved,
			&i.ListID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublisherById = `-- name: GetPublisherById :one

SELECT id, name, url, avatar FROM source WHERE id = $1
`

// -----------------------------------------------
// PUBLISHER REPOSITORY
// -----------------------------------------------
func (q *Queries) GetPublisherById(ctx context.Context, id int32) (Source, error) {
	row := q.db.QueryRow(ctx, getPublisherById, id)
	var i Source
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Avatar,
	)
	return i, err
}

const getSubscribedPublishersByUserId = `-- name: GetSubscribedPublishersByUserId :many

SELECT DISTINCT id, name, url, avatar, user_id, source_id
FROM source
JOIN subscription ON source.id = subscription.source_id
WHERE subscription.user_id = $1
`

type GetSubscribedPublishersByUserIdRow struct {
	ID       int32  `json:"id"`
	Name     string `json:"name"`
	Url      string `json:"url"`
	Avatar   string `json:"avatar"`
	UserID   int32  `json:"user_id"`
	SourceID int32  `json:"source_id"`
}

// -----------------------------------------------
// SUBSCRIBE LIST REPOSITORY
// -----------------------------------------------
func (q *Queries) GetSubscribedPublishersByUserId(ctx context.Context, userID int32) ([]GetSubscribedPublishersByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getSubscribedPublishersByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSubscribedPublishersByUserIdRow{}
	for rows.Next() {
		var i GetSubscribedPublishersByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.Avatar,
			&i.UserID,
			&i.SourceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isArticleInBookmarkList = `-- name: IsArticleInBookmarkList :one
SELECT list_id, post_id FROM list_post WHERE list_id = $1 AND post_id = $2
`

type IsArticleInBookmarkListParams struct {
	ListID int32 `json:"list_id"`
	PostID int64 `json:"post_id"`
}

func (q *Queries) IsArticleInBookmarkList(ctx context.Context, arg IsArticleInBookmarkListParams) (ListPost, error) {
	row := q.db.QueryRow(ctx, isArticleInBookmarkList, arg.ListID, arg.PostID)
	var i ListPost
	err := row.Scan(&i.ListID, &i.PostID)
	return i, err
}

const isPublisherSubscribedByUserId = `-- name: IsPublisherSubscribedByUserId :one
SELECT user_id, source_id FROM subscription WHERE user_id = $1 AND source_id = $2
`

type IsPublisherSubscribedByUserIdParams struct {
	UserID   int32 `json:"user_id"`
	SourceID int32 `json:"source_id"`
}

func (q *Queries) IsPublisherSubscribedByUserId(ctx context.Context, arg IsPublisherSubscribedByUserIdParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, isPublisherSubscribedByUserId, arg.UserID, arg.SourceID)
	var i Subscription
	err := row.Scan(&i.UserID, &i.SourceID)
	return i, err
}

const removeArticleFromBookmarkList = `-- name: RemoveArticleFromBookmarkList :one
DELETE FROM list_post WHERE list_id = $1 AND post_id = $2 RETURNING list_id, post_id
`

type RemoveArticleFromBookmarkListParams struct {
	ListID int32 `json:"list_id"`
	PostID int64 `json:"post_id"`
}

func (q *Queries) RemoveArticleFromBookmarkList(ctx context.Context, arg RemoveArticleFromBookmarkListParams) (ListPost, error) {
	row := q.db.QueryRow(ctx, removeArticleFromBookmarkList, arg.ListID, arg.PostID)
	var i ListPost
	err := row.Scan(&i.ListID, &i.PostID)
	return i, err
}

const searchArticlesByName = `-- name: SearchArticlesByName :many
SELECT id, title, publish_date, url, source_id FROM post WHERE title ILIKE '%' || $1 || '%'
`

func (q *Queries) SearchArticlesByName(ctx context.Context, dollar_1 pgtype.Text) ([]Post, error) {
	rows, err := q.db.Query(ctx, searchArticlesByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.PublishDate,
			&i.Url,
			&i.SourceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchPublishersByName = `-- name: SearchPublishersByName :many
SELECT id, name, url, avatar FROM source WHERE name ILIKE '%' || $1 || '%'
`

func (q *Queries) SearchPublishersByName(ctx context.Context, dollar_1 pgtype.Text) ([]Source, error) {
	rows, err := q.db.Query(ctx, searchPublishersByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Source{}
	for rows.Next() {
		var i Source
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const subscribePublisher = `-- name: SubscribePublisher :one
INSERT INTO subscription (user_id, source_id) VALUES ($1, $2) RETURNING user_id, source_id
`

type SubscribePublisherParams struct {
	UserID   int32 `json:"user_id"`
	SourceID int32 `json:"source_id"`
}

func (q *Queries) SubscribePublisher(ctx context.Context, arg SubscribePublisherParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, subscribePublisher, arg.UserID, arg.SourceID)
	var i Subscription
	err := row.Scan(&i.UserID, &i.SourceID)
	return i, err
}

const unsubscribePublisher = `-- name: UnsubscribePublisher :one
DELETE FROM subscription WHERE user_id = $1 AND source_id = $2 RETURNING user_id, source_id
`

type UnsubscribePublisherParams struct {
	UserID   int32 `json:"user_id"`
	SourceID int32 `json:"source_id"`
}

func (q *Queries) UnsubscribePublisher(ctx context.Context, arg UnsubscribePublisherParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, unsubscribePublisher, arg.UserID, arg.SourceID)
	var i Subscription
	err := row.Scan(&i.UserID, &i.SourceID)
	return i, err
}
